{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\oguzh\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\with-apollo\\\\lib\\\\apollo.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\nimport { Provider } from \"react-redux\";\nimport { initializeStore } from \"../store\";\nlet apolloClient = null;\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      initialReduxState,\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"initialReduxState\", \"apolloClient\", \"apolloState\"]);\n\n    const store = getOrInitializeStore(initialReduxState);\n    const client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, __jsx(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }))));\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    const displayName = PageComponent.displayName || PageComponent.name || \"Component\";\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree\n      } = ctx;\n      const apolloClient = ctx.apolloClient = initApolloClient();\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      }\n\n      if (true) {\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if ssr is enabled\n\n\n        if (ssr) {\n          try {\n            const {\n              getDataFromTree\n            } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread({}, pageProps, {\n                apolloClient\n              }),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 63\n              },\n              __self: this\n            }));\n          } catch (error) {\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n\n          Head.rewind();\n        }\n      }\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread({}, pageProps, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\n\nfunction initApolloClient(initialState) {\n  if (true) {\n    return createApolloClient(initialState);\n  }\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n\nfunction createApolloClient(initialState = {}) {\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: \"https://fakeql.com/graphql/d0397a2f20f6a38bd45f61b171fdce3c\",\n      credentials: \"same-origin\",\n      fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n\nlet reduxStore;\n\nconst getOrInitializeStore = initialState => {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (true) {\n    return initializeStore(initialState);\n  } // Create store if unavailable on the client and set it on the window object\n\n\n  if (!reduxStore) {\n    reduxStore = initializeStore(initialState);\n  }\n\n  return reduxStore;\n};","map":{"version":3,"sources":["C:/Users/oguzh/OneDrive/Masaüstü/with-apollo/lib/apollo.js"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","fetch","Provider","initializeStore","apolloClient","withApollo","PageComponent","ssr","WithApollo","initialReduxState","apolloState","pageProps","store","getOrInitializeStore","client","initApolloClient","process","env","NODE_ENV","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","link","uri","credentials","restore","reduxStore"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\nimport { Provider } from \"react-redux\";\nimport { initializeStore } from \"../store\";\n\nlet apolloClient = null;\n\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({\n    initialReduxState,\n    apolloClient,\n    apolloState,\n    ...pageProps\n  }) => {\n    const store = getOrInitializeStore(initialReduxState);\n    const client = apolloClient || initApolloClient(apolloState);\n    return (\n      <ApolloProvider client={client}>\n        <Provider store={store}>\n          <PageComponent {...pageProps} />\n        </Provider>\n      </ApolloProvider>\n    );\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || \"Component\";\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx;\n\n      const apolloClient = (ctx.apolloClient = initApolloClient());\n\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      }\n\n      if (typeof window === \"undefined\") {\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n              />\n            );\n          } catch (error) {\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n\n          Head.rewind();\n        }\n      }\n\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nfunction initApolloClient(initialState) {\n  if (typeof window === \"undefined\") {\n    return createApolloClient(initialState);\n  }\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n\nfunction createApolloClient(initialState = {}) {\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: new HttpLink({\n      uri: \"https://fakeql.com/graphql/d0397a2f20f6a38bd45f61b171fdce3c\",\n      credentials: \"same-origin\",\n      fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\nlet reduxStore;\nconst getOrInitializeStore = initialState => {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (typeof window === \"undefined\") {\n    return initializeStore(initialState);\n  }\n\n  // Create store if unavailable on the client and set it on the window object\n  if (!reduxStore) {\n    reduxStore = initializeStore(initialState);\n  }\n\n  return reduxStore;\n};\n"]},"metadata":{},"sourceType":"module"}