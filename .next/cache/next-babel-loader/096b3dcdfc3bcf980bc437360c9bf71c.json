{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\oguzh\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\with-apollo\\\\lib\\\\apollo.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\nimport { Provider } from \"react-redux\";\nimport { initializeStore } from \"../store\";\nvar apolloClient = null;\nexport function withApollo(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var initialReduxState = _ref2.initialReduxState,\n        apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"initialReduxState\", \"apolloClient\", \"apolloState\"]);\n\n    var store = getOrInitializeStore(initialReduxState);\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, __jsx(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }))));\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    var displayName = PageComponent.displayName || PageComponent.name || \"Component\";\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(ctx) {\n        var AppTree, apolloClient, pageProps, _ref4, getDataFromTree, apolloState;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                AppTree = ctx.AppTree;\n                apolloClient = ctx.apolloClient = initApolloClient();\n                pageProps = {};\n\n                if (!PageComponent.getInitialProps) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 6;\n                return PageComponent.getInitialProps(ctx);\n\n              case 6:\n                pageProps = _context.sent;\n\n              case 7:\n                if (!false) {\n                  _context.next = 24;\n                  break;\n                }\n\n                if (!(ctx.res && ctx.res.finished)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", pageProps);\n\n              case 10:\n                if (!ssr) {\n                  _context.next = 24;\n                  break;\n                }\n\n                _context.prev = 11;\n                _context.next = 14;\n                return import(\"@apollo/react-ssr\");\n\n              case 14:\n                _ref4 = _context.sent;\n                getDataFromTree = _ref4.getDataFromTree;\n                _context.next = 18;\n                return getDataFromTree(__jsx(AppTree, {\n                  pageProps: _objectSpread({}, pageProps, {\n                    apolloClient: apolloClient\n                  }),\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 63\n                  },\n                  __self: this\n                }));\n\n              case 18:\n                _context.next = 23;\n                break;\n\n              case 20:\n                _context.prev = 20;\n                _context.t0 = _context[\"catch\"](11);\n                console.error(\"Error while running `getDataFromTree`\", _context.t0);\n\n              case 23:\n                Head.rewind();\n\n              case 24:\n                apolloState = apolloClient.cache.extract();\n                return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                  apolloState: apolloState\n                }));\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[11, 20]]);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  return WithApollo;\n}\n\nfunction initApolloClient(initialState) {\n  if (false) {\n    return createApolloClient(initialState);\n  }\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return new ApolloClient({\n    ssrMode: false,\n    link: new HttpLink({\n      uri: \"https://fakeql.com/graphql/d0397a2f20f6a38bd45f61b171fdce3c\",\n      credentials: \"same-origin\",\n      fetch: fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n\nvar reduxStore;\n\nvar getOrInitializeStore = function getOrInitializeStore(initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (false) {\n    return initializeStore(initialState);\n  } // Create store if unavailable on the client and set it on the window object\n\n\n  if (!reduxStore) {\n    reduxStore = initializeStore(initialState);\n  }\n\n  return reduxStore;\n};","map":{"version":3,"sources":["C:/Users/oguzh/OneDrive/Masaüstü/with-apollo/lib/apollo.js"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","fetch","Provider","initializeStore","apolloClient","withApollo","PageComponent","ssr","WithApollo","initialReduxState","apolloState","pageProps","store","getOrInitializeStore","client","initApolloClient","process","env","NODE_ENV","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","link","uri","credentials","restore","reduxStore"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\nimport { Provider } from \"react-redux\";\nimport { initializeStore } from \"../store\";\n\nlet apolloClient = null;\n\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({\n    initialReduxState,\n    apolloClient,\n    apolloState,\n    ...pageProps\n  }) => {\n    const store = getOrInitializeStore(initialReduxState);\n    const client = apolloClient || initApolloClient(apolloState);\n    return (\n      <ApolloProvider client={client}>\n        <Provider store={store}>\n          <PageComponent {...pageProps} />\n        </Provider>\n      </ApolloProvider>\n    );\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || \"Component\";\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx;\n\n      const apolloClient = (ctx.apolloClient = initApolloClient());\n\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      }\n\n      if (typeof window === \"undefined\") {\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n              />\n            );\n          } catch (error) {\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n\n          Head.rewind();\n        }\n      }\n\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nfunction initApolloClient(initialState) {\n  if (typeof window === \"undefined\") {\n    return createApolloClient(initialState);\n  }\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n\nfunction createApolloClient(initialState = {}) {\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: new HttpLink({\n      uri: \"https://fakeql.com/graphql/d0397a2f20f6a38bd45f61b171fdce3c\",\n      credentials: \"same-origin\",\n      fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\nlet reduxStore;\nconst getOrInitializeStore = initialState => {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (typeof window === \"undefined\") {\n    return initializeStore(initialState);\n  }\n\n  // Create store if unavailable on the client and set it on the window object\n  if (!reduxStore) {\n    reduxStore = initializeStore(initialState);\n  }\n\n  return reduxStore;\n};\n"]},"metadata":{},"sourceType":"module"}